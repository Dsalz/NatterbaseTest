{"version":3,"sources":["../../server/controllers/loginController.js"],"names":["login","req","res","body","username","password","tokenizer","createToken","token","status","json","error"],"mappings":";;;;;;AAAA;;;;;;;;kBAEe;AACLA,SADK;AAAA,4FACEC,GADF,EACOC,GADP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wCAEwBD,IAAIE,IAF5B,EAECC,QAFD,aAECA,QAFD,EAEWC,QAFX,aAEWA,QAFX;;AAAA,kCAGHD,aAAa,OAAb,IAAwBC,aAAa,OAHlC;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAIiBC,oBAAUC,WAAV,CAAsB,EAAEH,kBAAF,EAAYC,kBAAZ,EAAtB,CAJjB;;AAAA;AAIGG,iCAJH;AAAA,6DAKIN,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEF,YAAF,EAArB,CALJ;;AAAA;AAAA,6DAOAN,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,qBAAT,EAArB,CAPA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,C","file":"loginController.js","sourcesContent":["import tokenizer from '../middleware/tokenizer';\n\nexport default {\n    async login (req, res){\n        const { username, password } = req.body;\n        if( username === 'admin' && password === 'admin'){\n            const token = await tokenizer.createToken({ username, password })\n            return res.status(200).json({ token })\n        }\n        return res.status(401).json({ error: \"Invalid Credentials\"})\n    }\n}"]}