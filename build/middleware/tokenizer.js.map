{"version":3,"sources":["../../server/middleware/tokenizer.js"],"names":["dotenv","config","secretKey","process","env","SECRET_KEY","createToken","Promise","resolve","reject","jwt","sign","user","err","token","verifyToken","req","res","next","authorization","headers","status","json","error","split","verify","data"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEAA,iBAAOC,MAAP;;AAEA,IAAMC,YAAYC,QAAQC,GAAR,CAAYC,UAA9B;;kBAEe;AACXC,iBAAa;AAAA,eAAQ,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAoB;AAClDC,mCAAIC,IAAJ,CAAU,EAAEC,UAAF,EAAV,EAAqBV,SAArB,EAAgC,UAACW,GAAD,EAAMC,KAAN,EAAgB;AAC5C,oBAAID,GAAJ,EAAQ;AACJJ,2BAAOI,GAAP;AACH;AACDL,wBAAQM,KAAR;AACH,aALD;AAMH,SAPoB,CAAR;AAAA,KADF;;AAUXC,iBAAa,qBAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,YACrBC,aADqB,GACHH,IAAII,OADD,CACrBD,aADqB;;AAE7B,YAAG,CAACA,aAAJ,EAAkB;AACd,mBAAOF,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,uBAAO;AADiB,aAArB,CAAP;AAGH;;AAED,YAAMT,QAAQK,cAAcK,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAd;AACA,eAAOd,uBAAIe,MAAJ,CAAYX,KAAZ,EAAmBZ,SAAnB,EAA8B,UAACW,GAAD,EAAMa,IAAN,EAAe;AAChD,gBAAGb,GAAH,EAAO;AACH,uBAAOI,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,2BAAO;AADiB,iBAArB,CAAP;AAGH;AACDP,gBAAIJ,IAAJ,GAAWc,KAAKd,IAAhB;AACA,mBAAOM,MAAP;AACH,SARM,CAAP;AASH;AA5BU,C","file":"tokenizer.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst secretKey = process.env.SECRET_KEY;\n\nexport default {\n    createToken: user => new Promise ((resolve, reject) =>{\n        jwt.sign( { user } , secretKey, (err, token) => {\n            if (err){\n                reject(err);\n            }\n            resolve(token);\n        })\n    }),\n\n    verifyToken: (req, res, next) => {\n        const { authorization } = req.headers;\n        if(!authorization){\n            return res.status(401).json({\n                error: 'Request has no Token'\n            });\n        }\n\n        const token = authorization.split(' ')[1];\n        return jwt.verify( token, secretKey, (err, data) => {\n            if(err){\n                return res.status(401).json({\n                    error: 'Invalid Token'\n                });\n            }\n            req.user = data.user;\n            return next();\n        })\n    }\n}"]}